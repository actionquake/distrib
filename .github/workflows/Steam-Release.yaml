name: Steam Release

# on:  
#   push:
#     tags:
#       - 'v*'

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Release version tag"
        required: true

env:
  CFG_WORKING_DIR: "config"
  LIN64_DIST_DIR: "linux-x64-dist"
  WIN64_DIST_DIR: "windows-x64-dist"
  WIN32_DIST_DIR: "windows-i386-dist"
  MAC_DIST_DIR: "mac-universal-dist"

jobs:      
  steam_release:
    runs-on: [self-hosted, x86] ##  Must run on self-hosted due to Steam login credential weirdness
    steps:
      - name: 'Cleanup build folder'
        run: |
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - name: Checkout distrib
        uses: actions/checkout@v3
        with:
          repository: actionquake/distrib
          path: ${{ env.CFG_WORKING_DIR }}

      - name: Generate checksum file
        working-directory: ${{ env.CFG_WORKING_DIR }}/action
        run: |
          find -type f \( -not -name "checksums" \) -exec md5sum '{}' \; > checksums

      - name: Generate dist directories
        run: |
          mkdir -p ${{ env.LIN64_DIST_DIR }}/action
          mkdir -p ${{ env.WIN64_DIST_DIR }}/action
          mkdir -p ${{ env.WIN32_DIST_DIR }}/action
          mkdir -p ${{ env.MAC_DIST_DIR }}

      ## Linux x86_64
      - name: Download latest Linux x86_64 Q2Pro artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: Q2Pro-Linux.yaml
          name: q2pro-linux-x86_64-steam
          path: ${{ env.LIN64_DIST_DIR }}/

      - name: Set Linux binaries to executable
        run: |
          chmod +x ${{ env.LIN64_DIST_DIR }}/*

      - name: Download latest Linux x86_64 TNG artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: TNG-Linux.yaml
          name: tng-lin-x86_64-library
          path: ${{ env.LIN64_DIST_DIR }}/action/

      - name: Copy action content (Linux 64)
        run: |
          cp -r ${{ env.CFG_WORKING_DIR }}/action/* ${{ env.LIN64_DIST_DIR }}/action/

      ## Win32
      - name: Download latest Win32 Q2Pro artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: Q2Pro-Windows.yaml
          name: q2pro-win-32-steam
          path: ${{ env.WIN32_DIST_DIR }}/

      - name: Download latest Win32 TNG artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: TNG-Windows.yaml
          name: tng-win-32
          path: ${{ env.WIN32_DIST_DIR }}/action/

      - name: Copy action content (Win 32)
        run: |
          cp -r ${{ env.CFG_WORKING_DIR }}/action/* ${{ env.WIN32_DIST_DIR }}/action/

      ## Win64
      - name: Download latest Win64 Q2Pro artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: Q2Pro-Windows.yaml
          name: q2pro-win-64-steam
          path: ${{ env.WIN64_DIST_DIR }}/

      - name: Download latest Win64 TNG artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: TNG-Windows.yaml
          name: tng-win-64
          path: ${{ env.WIN64_DIST_DIR }}/action/

      - name: Copy action content (Win 64)
        run: |
          cp -r ${{ env.CFG_WORKING_DIR }}/action/* ${{ env.WIN64_DIST_DIR }}/action/

      ## Mac Universal
      - name: Download latest Mac Universal artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: Mac-Artifacts.yaml
          name: mac-universal-zip-steam

      - name: Copy action content (Mac Universal)
        run: |
          unzip aqtion-mac-universal-steam.zip -d ${{ env.MAC_DIST_DIR }}/

      ## Generate zip files
      # - name: Zip artifacts for Steam deployment
      #   run: |
      #     zip -r aqtion-client-${{github.ref_name}}-windows-x64.zip ${{ env.WIN64_DIST_DIR }}
      #     zip -r aqtion-client-${{github.ref_name}}-windows-i386.zip ${{ env.WIN32_DIST_DIR }}
      #     zip -r aqtion-client-${{github.ref_name}}-linux-x64.zip ${{ env.LIN64_DIST_DIR }}
      #     zip -r aqtion-client-${{github.ref_name}}-mac-intel.zip ${{ env.MAC_INTEL_DIST_DIR }}

      ## Upload to Steam
      - name: Copy VDF scripts
        run: |
          cp ${{ env.CFG_WORKING_DIR }}/scripts/steam/*.vdf .

      - name: Upload All Builds
        run: steamcmd +login ${STEAM_LOGIN_NAME} ${STEAM_LOGIN_PASSWORD} +run_app_build /home/github/actions-runner/_work/distrib/distrib/aqtion.vdf +quit
        env:
          STEAM_LOGIN_NAME: ${{ secrets.STEAM_LOGIN_NAME }}
          STEAM_LOGIN_PASSWORD: ${{ secrets.STEAM_LOGIN_PASSWORD }}